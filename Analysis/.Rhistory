df_ <- df_[(1 + 45 + 9):(nrow(df_) - 45),]
}
# If the participant's file has 729 datapoints
if (nrow(df_) == 729){
# Create an onset sequence that removes the first 60 and last 60 seconds, plus the 17 second buffer
df_ <- df_[(1 + 30 + 9):(nrow(df_) - 30),]
}
## If this is the first file
if (FILE == 1){
## Make it the standard
df <- df_
}
## If it's a later file
if (FILE > 1){
## Bind the columns together
df <- cbind(df, df_)
}
}
## Cleaning the space
rm(Run, PID, files, FILE, df_)
Window_Sizes <- c(30,40,50)
nROI <- 400
registerDoMC(detectCores()/2)
## Iterating through differently sized windows
for (WINDOW in Window_Sizes) {
## Creating a model dataframe to reference
rows <- 1:(nrow(df) - (WINDOW/2))
cols <- c("PID1", "PID2", "Run", "Region", "Window", "Value_Cor_Neuro")
df_model <- as.data.frame(matrix(NA,
nrow = length(rows),
ncol = length(cols),
dimnames = list(rows, cols)))
rm(rows,cols)
## Iterating through each run
foreach(RUN=1:1)  %:%
## and iterating through each of the ROIs
foreach(ROI=1:2) %dopar% {
## Identifying the Data that is Comparable to Correlate
df_cor_ <- grep(pattern = paste0("run-", RUN, "_ROI-", ROI, "$"),
x = names(df),
value = TRUE) %>%
df[,.]
## Iterating through the Different Combinations
for (PID1 in 1:(ncol(df_cor_) - 1)){
for (PID2 in 2:ncol(df_cor_)){
if (PID2 > PID1){
# Creating a new dataframe with the structure of df_cor
df_temp <- df_model
# Filling in information
df_temp$PID1 <- sub("(_run-.*)", "", names(df_cor_)[PID1])
df_temp$PID2 <- sub("(_run-.*)", "", names(df_cor_)[PID2])
df_temp$Run <- RUN
df_temp$Region <- ROI
df_temp$Window <- 1:nrow(df_temp)
df_temp$Value_Cor_Neuro <- Sliding_Window_Cor(x = df_cor_[,PID1],
y = df_cor_[,PID2],
window_size = WINDOW)
## If this is the first iteration
if (PID1 == 1 & PID2 == 2){
## Make the generated dataframe the standard
df_cor <- df_temp
}
## If this is a later iteration
if (PID1 != 1 | PID2 != 2){
## Bind the rows together
df_cor <- rbind(df_cor,
df_temp)
}
}
}
# Print Progress
# print(paste0("RUN: ", RUN, " | ROI: ", ROI, " | PID1: ", PID1))
}
## Save the current dataframe
write.csv(df_cor,
paste0(here(),"/Data/Sliding_Window/nROI-", nROI,"_WinSize-", WINDOW,"_Run-",RUN,"_ROI-", ROI,".csv"))
}
}
## Iterating through differently sized windows
for (WINDOW in Window_Sizes) {
## Creating a model dataframe to reference
rows <- 1:(nrow(df) - (WINDOW/2))
cols <- c("PID1", "PID2", "Run", "Region", "Window", "Value_Cor_Neuro")
df_model <- as.data.frame(matrix(NA,
nrow = length(rows),
ncol = length(cols),
dimnames = list(rows, cols)))
rm(rows,cols)
## Iterating through each run
foreach(RUN=1:2)  %:%
## and iterating through each of the ROIs
foreach(ROI=1:400) %dopar% {
## Identifying the Data that is Comparable to Correlate
df_cor_ <- grep(pattern = paste0("run-", RUN, "_ROI-", ROI, "$"),
x = names(df),
value = TRUE) %>%
df[,.]
## Iterating through the Different Combinations
for (PID1 in 1:(ncol(df_cor_) - 1)){
for (PID2 in 2:ncol(df_cor_)){
if (PID2 > PID1){
# Creating a new dataframe with the structure of df_cor
df_temp <- df_model
# Filling in information
df_temp$PID1 <- sub("(_run-.*)", "", names(df_cor_)[PID1])
df_temp$PID2 <- sub("(_run-.*)", "", names(df_cor_)[PID2])
df_temp$Run <- RUN
df_temp$Region <- ROI
df_temp$Window <- 1:nrow(df_temp)
df_temp$Value_Cor_Neuro <- Sliding_Window_Cor(x = df_cor_[,PID1],
y = df_cor_[,PID2],
window_size = WINDOW)
## If this is the first iteration
if (PID1 == 1 & PID2 == 2){
## Make the generated dataframe the standard
df_cor <- df_temp
}
## If this is a later iteration
if (PID1 != 1 | PID2 != 2){
## Bind the rows together
df_cor <- rbind(df_cor,
df_temp)
}
}
}
# Print Progress
# print(paste0("RUN: ", RUN, " | ROI: ", ROI, " | PID1: ", PID1))
}
## Save the current dataframe
write.csv(df_cor,
paste0(here(),"/Data/Sliding_Window/nROI-", nROI,"_WinSize-", WINDOW,"_Run-",RUN,"_ROI-", ROI,".csv"))
}
}
## Loading Packages
pacman::p_load(doMC,
foreach,
here,
lmer4,
lmerTest,
parallel,
tidyverse)
for (WINDOW in c(30)){
for (RUN in c(1:1)){
df_behav <- read.csv(paste0(here(), "/Data/Type-Behav_WinSize-", WINDOW, "_Run-",RUN,".csv"),
row.names = 1)
for (ROI in 1:1){
df_neuro <- read.csv(paste0(here(), "/Data/nROI-400_WinSize-", WINDOW, "_Run-",RUN,"_ROI-", ROI,".csv"),
row.names = 1)
# df <- merge(df_behav,
#             df_neuro,
#             by = c("PID1", "PID2", ""))
}
}
}
for (WINDOW in c(30)){
for (RUN in c(1:1)){
df_behav <- read.csv(paste0(here(), "/Data/Sliding_Window/Type-Behav_WinSize-", WINDOW, "_Run-",RUN,".csv"),
row.names = 1)
for (ROI in 1:1){
df_neuro <- read.csv(paste0(here(), "/Data/Sliding_Window/nROI-400_WinSize-", WINDOW, "_Run-",RUN,"_ROI-", ROI,".csv"),
row.names = 1)
# df <- merge(df_behav,
#             df_neuro,
#             by = c("PID1", "PID2", ""))
}
}
}
View(df_behav)
df_behav$PID1 <- str_replace(string = df_behav$PID1, pattern = "_.$", replacement = "")
View(df_behav)
View(df_neuro)
View(df_behav)
View(df_neuro)
View(df_behav)
for (WINDOW in c(30)){
for (RUN in c(1:1)){
df_behav <- read.csv(paste0(here(), "/Data/Sliding_Window/Type-Behav_WinSize-", WINDOW, "_Run-",RUN,".csv"),
row.names = 1)
df_behav$PID1 <- str_replace(string = df_behav$PID1, pattern = "_.$", replacement = "")
df_behav$PID2 <- str_replace(string = df_behav$PID2, pattern = "_.$", replacement = "")
for (ROI in 1:1){
df_neuro <- read.csv(paste0(here(), "/Data/Sliding_Window/nROI-400_WinSize-", WINDOW, "_Run-",RUN,"_ROI-", ROI,".csv"),
row.names = 1)
df <- merge(df_behav,
df_neuro,
by = c("PID1", "PID2", "Run", "Window"))
}
}
}
View(df)
df <- merge(df_behav,
df_neuro,
by = c("PID1", "PID2"))
df <- merge(df_behav,
df_neuro,
by = c("PID1", "PID2", "Run", "Window"))
View(df)
??merge
df <- merge(df_behav,
df_neuro)
df_neuro <- df_neuro[,1:5]
df_neuro <- distinct(df_neuro)
for (WINDOW in c(30)){
for (RUN in c(1:1)){
df_behav <- read.csv(paste0(here(), "/Data/Sliding_Window/Type-Behav_WinSize-", WINDOW, "_Run-",RUN,".csv"),
row.names = 1)
df_behav$PID1 <- str_replace(string = df_behav$PID1, pattern = "_.$", replacement = "")
df_behav$PID2 <- str_replace(string = df_behav$PID2, pattern = "_.$", replacement = "")
for (ROI in 1:1){
df_neuro <- read.csv(paste0(here(), "/Data/Sliding_Window/nROI-400_WinSize-", WINDOW, "_Run-",RUN,"_ROI-", ROI,".csv"),
row.names = 1)
# df <- merge(df_behav,
#             df_neuro)
}
}
}
df <- merge(df_behav,
df_neuro)
df <- merge(x = df_behav,
y = df_neuro,
all = T)
View(df)
unique(df_neuro$PID1)
unique(df_behav$PID1)
df_neuro$Pair <- NA
for (ROW in 1:nrow(df_neuro)){
df_neuro$Pair[ROW] <- paste(sort(df_neuro$PID1[ROW], df_neuro$PID2[ROW]),sep = "-")
}
df_neuro$Pair <- NA
for (ROW in 1:nrow(df_neuro)){
df_neuro$Pair[ROW] <- c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort() %>%
paste(sep = "-")
}
ROW = 1
c(df_neuro$PID1[ROW], df_neuro$PID2[ROW])
c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort()
c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort() %>%
paste(sep = "-")
c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort() %>%
paste(., sep = "-")
c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort() %>%
paste(., collapse = "-",sep = "-")
c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort() %>%
paste(., collapse = "_")
df_neuro$Pair <- NA
for (ROW in 1:nrow(df_neuro)){
df_neuro$Pair[ROW] <- c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort() %>%
paste(., collapse = "_")
}
for (WINDOW in c(30)){
for (RUN in c(1:1)){
df_behav <- read.csv(paste0(here(), "/Data/Sliding_Window/Type-Behav_WinSize-", WINDOW, "_Run-",RUN,".csv"),
row.names = 1)
df_behav$PID1 <- str_replace(string = df_behav$PID1, pattern = "_.$", replacement = "")
df_behav$PID2 <- str_replace(string = df_behav$PID2, pattern = "_.$", replacement = "")
df_behav$Pair <- NA
for (ROW in 1:nrow(df_behav)){
df_behav$Pair[ROW] <- c(df_behav$PID1[ROW], df_behav$PID2[ROW]) %>%
sort() %>%
paste(., collapse = "_")
}
df_behav <- df_behav[,-which(names(df_behav) == "PID1" | names(df_behav) == "PID2" )]
for (ROI in 1:1){
df_neuro <- read.csv(paste0(here(), "/Data/Sliding_Window/nROI-400_WinSize-", WINDOW, "_Run-",RUN,"_ROI-", ROI,".csv"),
row.names = 1)
df_neuro$Pair <- NA
for (ROW in 1:nrow(df_neuro)){
df_neuro$Pair[ROW] <- c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
sort() %>%
paste(., collapse = "_")
}
df_neuro <- df_neuro[,-which(names(df_neuro) == "PID1" | names(df_neuro) == "PID2" )]
df <- merge(x = df_behav,
y = df_neuro)
}
}
}
View(df_neuro)
View(df_neuro)
df <- merge(x = df_behav,
y = df_neuro)
View(df_behav)
unique(df_neuro$Pair)
setwd("/data/Uncertainty/scripts/Analysis/")
## Loading Packages
pacman::p_load(doMC,
foreach,
here,
parallel,
tidyverse)
## Adding custom function
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/Sliding_Window_Cor.R", local= T)
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/HRF_convolve.R", local= T)
df <- read.csv(paste0(here(), "/Data/df_behav_.csv"),
row.names = 1)
df$TR <- (df$SecondEnd - 17) / 2
df$PID <- paste0(df$PID, "_", df$Condition)
df <- df %>%
subset(select = c("PID", "CertRate", "TR")) %>%
pivot_wider(names_from = "PID",
values_from = "CertRate")
for (COLUMN in 2:ncol(df)){
df[,COLUMN] <- df[,COLUMN] %>%
unlist() %>%
as.numeric() %>%
diff() %>%
c(0,.) %>%
abs() %>%
scale() %>%
as.numeric() %>%
HRF_convolve(resample_q = 2)
}
View(df)
View(df)
## Loading Packages
pacman::p_load(doMC,
foreach,
here,
parallel,
tidyverse)
## Adding custom function
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/Sliding_Window_Cor.R", local= T)
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/HRF_convolve.R", local= T)
df <- read.csv(paste0(here(), "/Data/df_behav_.csv"),
row.names = 1)
df$TR <- (df$SecondEnd - 17) / 2
df$PID <- str_replace(df$PID,pattern = "^SR-", replacement = "^sub-")
df$PID <- paste0(df$PID, "_", df$Condition)
View(df)
## Loading Packages
pacman::p_load(doMC,
foreach,
here,
parallel,
tidyverse)
## Adding custom function
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/Sliding_Window_Cor.R", local= T)
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/HRF_convolve.R", local= T)
df <- read.csv(paste0(here(), "/Data/df_behav_.csv"),
row.names = 1)
df$TR <- (df$SecondEnd - 17) / 2
df$PID <- str_replace(df$PID,pattern = "^SR-", replacement = "sub-")
df$PID <- paste0(df$PID, "_", df$Condition)
View(df)
## Loading Packages
pacman::p_load(doMC,
foreach,
here,
parallel,
tidyverse)
## Adding custom function
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/Sliding_Window_Cor.R", local= T)
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/HRF_convolve.R", local= T)
df <- read.csv(paste0(here(), "/Data/df_behav_.csv"),
row.names = 1)
df$TR <- (df$SecondEnd - 17) / 2
df$PID <- str_replace(df$PID,pattern = "^SR-", replacement = "sub-")
df$PID <- paste0(df$PID, "_", df$Condition)
df <- df %>%
subset(select = c("PID", "CertRate", "TR")) %>%
pivot_wider(names_from = "PID",
values_from = "CertRate")
for (COLUMN in 2:ncol(df)){
df[,COLUMN] <- df[,COLUMN] %>%
unlist() %>%
as.numeric() %>%
diff() %>%
c(0,.) %>%
abs() %>%
scale() %>%
as.numeric() %>%
HRF_convolve(resample_q = 2)
}
Window_Sizes <- c(30,40,50)
registerDoMC(detectCores()/2)
## Iterating through differently sized windows
foreach(WINDOW=Window_Sizes)  %:%
# Iterating through each condition
foreach(COND=c("A","B")) %dopar% {
## Creating a model dataframe to reference
rows <- 1:(nrow(df) - (WINDOW/2))
cols <- c("PID1", "PID2", "Run", "Window", "Value_Cor_Behav")
df_model <- as.data.frame(matrix(NA,
nrow = length(rows),
ncol = length(cols),
dimnames = list(rows, cols)))
rm(rows,cols)
## Identifying the Data that is Comparable to Correlate
df_cor_ <- grep(pattern = paste0("_", COND),
x = names(df),
value = TRUE) %>%
df[,.]
## Iterating through the Different Combinations
for (PID1 in 1:(ncol(df_cor_) - 1)){
for (PID2 in 2:ncol(df_cor_)){
if (PID2 > PID1){
# Creating a new dataframe with the structure of df_cor
df_temp <- df_model
# Filling in information
df_temp$PID1 <- sub("(_run-.*)", "", names(df_cor_)[PID1])
df_temp$PID2 <- sub("(_run-.*)", "", names(df_cor_)[PID2])
if (COND == "A"){
df_temp$Run <- 1
}
if (COND == "B"){
df_temp$Run <- 2
}
df_temp$Window <- 1:nrow(df_temp)
df_temp$Value_Cor_Behav <- Sliding_Window_Cor(x = as.numeric(unlist(df_cor_[,PID1])),
y = as.numeric(unlist(df_cor_[,PID2])),
window_size = WINDOW)
## If this is the first iteration
if (PID1 == 1 & PID2 == 2){
## Make the generated dataframe the standard
df_cor <- df_temp
}
## If this is a later iteration
if (PID1 != 1 | PID2 != 2){
## Bind the rows together
df_cor <- rbind(df_cor,
df_temp)
}
}
}
# Print Progress
print(paste0("RUN: ", COND, " | PID1: ", PID1))
}
## Save the current dataframe
if (COND == "A"){
write.csv(df_cor,
paste0(here(),"/Data/Sliding_Window/Type-Behav_WinSize-", WINDOW,"_Run-1.csv"))
}
if (COND == "B"){
write.csv(df_cor,
paste0(here(),"/Data/Sliding_Window/Type-Behav_WinSize-", WINDOW,"_Run-2.csv"))
}
}
rm(df_cor_)
## Loading Packages
pacman::p_load(doMC,
foreach,
here,
lmer4,
lmerTest,
parallel,
tidyverse)
for (WINDOW in c(30)){
for (RUN in c(1:1)){
df_behav <- read.csv(paste0(here(), "/Data/Sliding_Window/Type-Behav_WinSize-", WINDOW, "_Run-",RUN,".csv"),
row.names = 1)
df_behav$PID1 <- str_replace(string = df_behav$PID1, pattern = "_.$", replacement = "")
df_behav$PID2 <- str_replace(string = df_behav$PID2, pattern = "_.$", replacement = "")
# df_behav$Pair <- NA
# for (ROW in 1:nrow(df_behav)){
#   df_behav$Pair[ROW] <- c(df_behav$PID1[ROW], df_behav$PID2[ROW]) %>%
#                         sort() %>%
#                         paste(., collapse = "_")
# }
# df_behav <- df_behav[,-which(names(df_behav) == "PID1" | names(df_behav) == "PID2" )]
for (ROI in 1:1){
df_neuro <- read.csv(paste0(here(), "/Data/Sliding_Window/nROI-400_WinSize-", WINDOW, "_Run-",RUN,"_ROI-", ROI,".csv"),
row.names = 1)
# df_neuro$Pair <- NA
# for (ROW in 1:nrow(df_neuro)){
#   df_neuro$Pair[ROW] <- c(df_neuro$PID1[ROW], df_neuro$PID2[ROW]) %>%
#                         sort() %>%
#                         paste(., collapse = "_")
# }
# df_neuro <- df_neuro[,-which(names(df_neuro) == "PID1" | names(df_neuro) == "PID2" )]
df <- merge(x = df_behav,
y = df_neuro)
}
}
}
View(df)
View(df)
View(df_behav)
View(df_neuro)
View(df)
df_temp <- df[,1:2]
df_temp <- distinct(df_temp)
df_temp <- df_behav[,1:2]
df_temp <- distinct(df_temp)
df_temp_ <- df[,1:2]
df_temp_ <- distinct(df_temp_)
View(df_temp)
View(df_temp_)
View(df_temp)
unique(df_neuro$PID2)
unique(df_behav$PID2)
## Loading Packages
pacman::p_load(doMC,
foreach,
here,
parallel,
tidyverse)
## Adding custom function
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/Sliding_Window_Cor.R", local= T)
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/HRF_convolve.R", local= T)
df <- read.csv(paste0(here(), "/Data/df_behav_.csv"),
row.names = 1)
View(df)
unique(df$PID)
# Loading the custom cleaning function
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/rucleaner.R", local = T)
